import { getI18nBundle } from '@ui5/webcomponents-base/dist/i18nBundle.js';
import formatMessage from '@ui5/webcomponents-base/dist/util/formatMessage.js';
import { useRef } from 'react';
import { useI18nContext } from '../context/I18nContext';
import { useIsomorphicLayoutEffect } from '../hooks';
const defaultBundle = {
    packageName: 'defaultBundle',
    getText: (val, ...values) => {
        var _a, _b;
        return formatMessage((_b = (_a = val === null || val === void 0 ? void 0 : val.defaultText) !== null && _a !== void 0 ? _a : val) !== null && _b !== void 0 ? _b : '', values);
    }
};
export const useI18nBundle = (bundleName) => {
    var _a;
    const i18nContext = useI18nContext();
    if (!i18nContext) {
        throw new Error(`'useI18nBundle()' may be used only in the context of a '<ThemeProvider>' component.`);
    }
    const i18nRef = useRef(i18nContext);
    useIsomorphicLayoutEffect(() => {
        const { i18nBundles, setI18nBundle } = i18nRef.current;
        let isMounted = true;
        if (!i18nBundles.hasOwnProperty(bundleName)) {
            getI18nBundle(bundleName).then((internalBundle) => {
                if (isMounted) {
                    setI18nBundle(bundleName, internalBundle);
                }
            });
        }
        return () => {
            isMounted = false;
        };
    }, [bundleName]);
    return (_a = i18nContext.i18nBundles[bundleName]) !== null && _a !== void 0 ? _a : defaultBundle;
};
